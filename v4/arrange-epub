#!/usr/bin/perl

# TODO: Change chapters to bastard title.

#
# Setup
#

# Directives
use strict;
use warnings;

# Modules
use Archive::Zip;
use Getopt::Long;

#
# Options
#

my $VERBOSE = 0;

&GetOptions(
	"verbose|v!" => \$VERBOSE
	);

#
# Processing
#

# Open the EPUB as a ZIP archive.
my $zip = Archive::Zip->new();

die "Cannot read zip archive $ARGV[0]"
	unless ($zip->read($ARGV[0]) == Archive::Zip::AZ_OK);

# Go through all the chapter files to see if we have any of the key
# files.
my %chapter_ids = ();
my $changed = 0;

# Handle the special cases.
my $contents = $zip->contents("nav.xhtml");
$changed += update_navigation(\$contents);
$zip->contents("nav.xhtml", $contents);

# Go through the rest of the entries.
print STDERR "Entries:\n" if $VERBOSE;

foreach my $memberName ($zip->memberNames())
{
	# Normally, we only process XHTML files.
	next unless $memberName =~ m@\.xhtml$@;
	next if $memberName eq "nav.xhtml";

	# Grab the entire contents and look for an ID.
	$contents = $zip->contents($memberName);
	my $id = $contents =~ m@<div id=\"([^\"]+)\" class=\"section@s
		? $1
		: undef;

	next unless defined $id;

	# Save the chapter and ID for when we rearrange the `content.opf` file.
	$chapter_ids{$id} = $memberName;
	$chapter_ids{$id} =~ s@\.xhtml$@@;

	# We have special processing for some of these categories.
	if ($id eq "legal")
	{
		update_legal(\$contents);
		$changed = 1;
	}
	elsif ($id eq "dedication")
	{
		update_dedication(\$contents);
		$changed = 1;
	}

	# Update breaks.
	$changed += update_breaks(\$contents);

	# Update the file.
	$zip->contents($memberName, $contents);

	# Remove the chapters and appendixes section.
	$zip->removeMember($memberName)
		if $id eq "chapters" or $id eq "appendixes";

	# Report what we are processing.
	print STDERR "Scanned $memberName ($id)\n" if $VERBOSE;
}

# Parse the `content.opf` to see if we have a legal.
$contents = $zip->contents("content.opf");
$changed += update_opf(\$contents);
$zip->contents("content.opf", $contents);

# Parse the `toc.ncx` and remove items.
$contents = $zip->contents("toc.ncx");
$changed += update_ncx(\$contents);
$zip->contents("toc.ncx", $contents);

# If we changed, write it out.
$zip->overwrite() if $changed;

#
# Specific File Updates
#

# Remove the legal and dedication entries.
sub update_navigation
{
	# Grab the values.
	my $ref = shift @_;

	# Remove the links for the frontmatter.
	foreach my $name (qw(Legal Dedication))
	{
		$$ref =~ s@
      <li [^\>]+>\s*
        <a [^>]+>\s*
          <span>$name</span>\s*
        </a>\s*
      </li>\s*
    @@sgx;
	}

	# Rename the title.
	$$ref =~ s@(<h1 id="toc-title")>.*?<(/h1>)@$1>Table of Contents<$2@sg;

	# Remove the chapters section.
    $$ref =~ s@
        <li\s+id="[^"]+">\s*
          <a\s+href="\w+.xhtml">\s*
            <span>Chapters</span>\s*
          </a>\s*
          <ol\s+class="toc">\s*
          (.*?)\s*
          </ol>\s*
        </li>@$1@sgx;

	# Change the appendix section.
    $$ref =~ s@
        <li\s+id="[^"]+">\s*
          <a\s+href="\w+.xhtml">\s*
            <span>Appendixes</span>\s*
          </a>\s*
          <ol\s+class="toc">\s*
          (.*?)\s*
          </ol>\s*
        </li>(.*)$@</ol><ul class="toc">PLACEHOLDERSECONDHOLDER@sgx;
	my $a_contents = $1;
	my $b_contents = $2;
	$a_contents =~ s@<ol @<ul @sg;
	$a_contents =~ s@</ol>@</ul>@sg;
	$b_contents =~ s@</ol>@</ul>@sg;
	$$ref =~ s@PLACEHOLDER@$a_contents@sg;
	$$ref =~ s@SECONDHOLDER@$b_contents@sg;

	# Return if we've changed.
	return 1;
}

# Remove the legal and dedication entries.
sub update_ncx
{
	# Grab the values.
	my $ref = shift @_;
	my $changed = 0;

	# Remove the links for the frontmatter.
	foreach my $name (qw(Chapters Appendixes))
	{
		$$ref =~ s@
    <navPoint\s+id="[^"]+"\s+playOrder="\d+">\s*
      <navLabel>\s*
        <text>$name</text>\s*
      </navLabel>\s*
      <content\s+src="ch\d+.xhtml"\s+/>\s*
      (<navPoint.*?</navPoint>)\s*
    </navPoint>@$1@sgx;
	}

	# Go through the lines and rebuild the play order.
	my @lines = split(/\n/, $$ref);
	my $playOrder = 1;

	for (my $index = 0; $index < @lines; $index++)
	{
		if ($lines[$index] =~ s@playOrder="\d+"@playOrder="$playOrder"@)
		{
			$playOrder++;
		}
	}

	$$ref = join("\n", @lines);

	# Return if we've changed.
	return $changed;
}

# Reorder elements
sub update_opf
{
	# Pull out the values so we can process them.
	my $ref = shift @_;
	my $value = 0;

	# Pull out the spine elements.
	if ($$ref =~ s@(<spine\s+toc="ncx">\s*)
                   (.*?)
                   (\s*</spine>)@$1-PLACEHOLDER-$3@sx)
	{
		# We have spine elements, so reorder them.
		my @items = split(/\n/, $2);

		# Pull out the lines for the legal.
		my @frontmatter = ();

		push @frontmatter, extract_item(\@items, "idref", "legal");
		push @frontmatter, extract_item(\@items, "idref", "dedication");

		# Get rid of the chapters and appendixes.
		extract_item(\@items, "idref", "chapters");
		extract_item(\@items, "idref", "appendixes");

		# Normalize the frontmatter lines.
		for (my $fm_index = 0; $fm_index < @frontmatter; $fm_index++)
		{
			$frontmatter[$fm_index] =~ s@/>@linear="yes" />@;
		}

		# Insert the front matter in front of the nav.
		my $nav_index = 0;
		++$nav_index until $items[$nav_index] =~ m@idref="nav"@
			|| $nav_index > $#items;

		splice(@items, $nav_index, 0, @frontmatter);

		# We are changing if we had frontmatter.
		$value++ if @frontmatter;

		# Put them back into the file.
		my $items = join("\n", @items);
		$$ref =~ s@-PLACEHOLDER-@$items@sg;
	}

	# Pull out the spine elements.
	if ($$ref =~ s@(<manifest>\s*)
                   (.*?)
                   (\s*</manifest>)@$1-PLACEHOLDER-$3@sx)
	{
		# We have spine elements, so reorder them.
		my @items = split(/\n/, $2);

		# Get rid of the chapters and appendixes.
		extract_item(\@items, "id", "chapters");
		extract_item(\@items, "id", "appendixes");

		# Put them back into the file.
		my $items = join("\n", @items);
		$$ref =~ s@-PLACEHOLDER-@$items@sg;
	}

	# Return if we made any changes.
	return $value;
}

# Remove the header from the legal chapter. All paragraphs in the
# legal section are blocked.
sub update_legal
{
	my $ref = shift @_;
	$$ref =~ s@<h1>.*?</h1>@@sg;
	$$ref =~ s@<p>@<p class="block">@sg;
}

# Remove the header from the dedication chapter. Also, the dedication
# is centered.
sub update_dedication
{
	my $ref = shift @_;
	$$ref =~ s@<h1>.*?</h1>@@sg;
	$$ref =~ s@<p>@<p class="center">@sg;
}

# Remove the <hr/> elements and replace them with a more obvious break.
sub update_breaks
{
	my $ref = shift @_;
	my $changed = $$ref =~ s@<hr\s*/>@<p class="break"># # #</p>@sg;
	return $changed;
}

#
# Item Removal
#

sub get_array_index
{
	my ($items, $attr, $chapter) = @_;
	my @items = @$items;
	my $index = 0;
	++$index until $items[$index] =~ m@$attr="$chapter"@
		|| $index > $#items;
	
	$index = -1 if $index == $#items;

	return $index;
}

sub extract_item
{
	my ($items, $attr, $id) = @_;
	my @list = ();

	if (exists $chapter_ids{$id})
	{
		my $chapter = $chapter_ids{$id};
		my $index = get_array_index($items, $attr, $chapter);
		
		if ($index >= 0)
		{
			push @list, splice(@$items, $index, 1);
		}
	}

	return @list;
}
